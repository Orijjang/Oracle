--실습 2-2
CREATE TABLE Student (
    stdNo char(8) primary key,
    Name varchar2(20) not null,
    Birth date not null,
    Major varchar2(20),
    ENR_DATE DATE NOT NULL
);

CREATE TABLE Course (
    CS_ID NUMBER(4) PRIMARY KEY,
    CS_NAME VARCHar2(30) not null,
    CS_Credit number(1) not null,
    CS_DEPT VARCHAR(20) NOT NULL 
);

CREATE TABLE Enrollment (
    ENR_NO NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    ENR_STDNO CHAR(8) NOT NULL,
    ENR_CSID NUMBER(4),
    MID_SCORE NUMBER,
    FINAL_SCORE NUMBER,
    TOTAL_SCORE NUMBER,
    GRADE CHAR(1)
);

--실습 2-3
INSERT INTO STUDENT VALUES('20121016','김유신','1991-01-13','국문학과','2012-02-01');
INSERT INTO STUDENT VALUES('20111126','김춘추','1992-04-11','경제학과','2011-02-01');
INSERT INTO STUDENT VALUES('20100216','장보고','1991-05-23','컴퓨터학과','2010-02-01');
INSERT INTO STUDENT VALUES('20120326','강감찬','1991-02-09','영문학과','2012-02-01');
INSERT INTO STUDENT VALUES('20130416','이순신','1992-11-30','경영학과','2012-02-01');
INSERT INTO STUDENT VALUES('20110521','송상현','1992-07-17','컴퓨터학과','2011-02-01');

INSERT INTO COURSE VALUES(1059,'고전문학',3,'국문학과');
INSERT INTO COURSE VALUES(2312,'데이터베이스',3,'컴퓨터학과');
INSERT INTO COURSE VALUES(1203,'Easy Writing',3,'영문학과');
INSERT INTO COURSE VALUES(2039,'글로벌경제학',3,'경제학과');
INSERT INTO COURSE VALUES(2301,'프로그래밍언어',3,'컴퓨터학과');
INSERT INTO COURSE VALUES(2303,'컴퓨터과학 개론',2,'컴퓨터학과');
INSERT INTO COURSE VALUES(3012,'마케팅 전략',2,'경영학과');

insert into enrollment values(1,'20111126',1203,null,null,null,null);
insert into enrollment values(2,'20121016',2301,null,null,null,null);
insert into enrollment values(3,'20121016',2303,null,null,null,null);
insert into enrollment values(4,'20111126',2039,null,null,null,null);
insert into enrollment values(5,'20100216',3012,null,null,null,null);
insert into enrollment values(6,'20120326',3012,null,null,null,null);
insert into enrollment values(7,'20121016',2312,null,null,null,null);
insert into enrollment values(8,'20130416',3012,null,null,null,null);

--실습 2-4
select * from student where major = '컴퓨터학과';
--실습 2-5
select * from course where CS_DEPT = '컴퓨터학과';
--실습 2-6
SELECT * FROM ENROLLMENT 
WHERE ENR_STDNO = '20121016';
--실습 2-7
SELECT NAME, MAJOR, ENR_DATE 
FROM STUDENT WHERE MAJOR = '국문학과';
--실습 2-8CHECK
SELECT CS_ID, CS_NAME, CS_CREDIT, CS_DEPT 
FROM COURSE WHERE CS_CREDIT = 2;
--실습 2-9CHECK
SELECT STDNO, NAME, BIRTH 
FROM STUDENT WHERE BIRTH LIKE '1992%';
/*SELECT STDNO, NAME, BIRTH 
--FROM STUDENT WHERE
birth >= '1992-01-01';
*/
--실습 2-10
UPDATE ENROLLMENT  SET MID_SCORE = 36, FINAL_SCORE= 42 
WHERE ENR_STDNO='20111126' AND ENR_CSID=1203;
UPDATE ENROLLMENT SET MID_SCORE = 24, FINAL_SCORE= 62 
WHERE ENR_STDNO='20121016' AND ENR_CSID=2301;
UPDATE ENROLLMENT SET MID_SCORE = 28, FINAL_SCORE= 40 
WHERE ENR_STDNO='20121016' AND ENR_CSID=2303;
UPDATE ENROLLMENT SET MID_SCORE = 37, FINAL_SCORE= 57 
WHERE ENR_STDNO='20111126' AND ENR_CSID=2039;
UPDATE ENROLLMENT SET MID_SCORE = 28, FINAL_SCORE= 68 
WHERE ENR_STDNO='20100216' AND ENR_CSID=3012;
UPDATE ENROLLMENT SET MID_SCORE = 16, FINAL_SCORE= 65 
WHERE ENR_STDNO='20120326' AND ENR_CSID=3012;
UPDATE ENROLLMENT SET MID_SCORE = 18, FINAL_SCORE= 38 
WHERE ENR_STDNO='20121016' AND ENR_CSID=2312;
UPDATE ENROLLMENT SET MID_SCORE = 25, FINAL_SCORE= 58 
WHERE ENR_STDNO='20130416' AND ENR_CSID=3012;

SELECT * FROM ENROLLMENT;

--실습 2-11 CHECK
UPDATE ENROLLMENT
SET 
    TOTAL_SCORE = MID_SCORE + FINAL_SCORE,
    GRADE = CASE
        WHEN (MID_SCORE + FINAL_SCORE) >= 90 THEN 'A'
        WHEN (MID_SCORE + FINAL_SCORE) >= 80 THEN 'B'
        WHEN (MID_SCORE + FINAL_SCORE) >= 70 THEN 'C'
        WHEN (MID_SCORE + FINAL_SCORE) >= 60 THEN 'D'
        ELSE 'F'
    END;
SELECT * FROM Enrollment;
--실습 2-12
SELECT * FROM ENROLLMENT 
ORDER BY TOTAL_SCORE DESC;
--실습 2-13
SELECT * FROM ENROLLMENT 
WHERE ENR_CSID = 3012 ORDER BY TOTAL_SCORE DESC;
--실습 2-14CHECK
SELECT CS_ID, CS_NAME FROM COURSE 
WHERE CS_NAME IN ('데이터베이스', '프로그래밍언어');
--CS_NAME IN ='데이터베이스' or CS_NAME IN = '프로그래밍언어');
--실습 2-15
SELECT CS_NAME, CS_DEPT FROM COURSE;
--실습 2-16CHECK
SELECT STDNO, NAME FROM STUDENT 
ORDER BY NAME ASC;
--실습 2-17
SELECT DISTINCT ENR_STDNO FROM ENROLLMENT;
--실습 2-18CHECK
SELECT MAX(TOTAL_SCORE) AS 가장_큰_총점 
FROM ENROLLMENT;
--실습 2-19
SELECT MAJOR, COUNT (MAJOR) AS 학생수 
FROM STUDENT 
GROUP BY MAJOR;
/*
SELECT MAJOR, COUNT (*) AS 학생수 
FROM STUDENT 
GROUP BY MAJOR;
*/
--실습 2-20
SELECT ENR_CSID, COUNT(ENR_CSID) AS 수강_학생수
FROM ENROLLMENT
GROUP BY ENR_CSID
HAVING COUNT(ENR_CSID) >=2;

/*정답
SELECT ENR_CSID, COUNT(*) AS 수강_학생수
FROM ENROLLMENT
GROUP BY ENR_CSID
HAVING COUNT(*) >=2;
*/

--실습 2-21 check
SELECT 
    STDNO,
    NAME,
    MAJOR,
    ENR_CSID,
    MID_SCORE,
    FINAL_SCORE,
    TOTAL_SCORE,
    GRADE
FROM STUDENT S
left join enrollment e on s.stdno = e.enr_stdno;

/*정답
SELECT 
    STDNO,
    NAME,
    MAJOR,
    ENR_CSID,
    MID_SCORE,
    FINAL_SCORE,
    TOTAL_SCORE,
    GRADE
FROM STUDENT S
left join enrollment e on s.stdno = e.enr_stdno;
*/

--실습 2-22 check
select name, stdno, enr_csid
from student s
join enrollment e
on s.stdno = e.enr_stdno
where enr_csid = 3012;

--#실습 2-23check#
select 
    stdno,
    name,
    count(stdno) as "수강신청 건수",
    sum(total_score) as 종합점수,
    sumtotal_score) / count(stdno) as 평균
from student s
join enrollment e on s.stdno = e.enr_stdno
group by stdno, name
order by stdno;
--having sum(stdno);


--#실습 2-24check#
select * from enrollment e
inner join course c on c
e.cs_id =e.enr_csid; 


--#실습 2-25check#
select 
    count(*) as 마케팅_전략_수강_신청건수,
    avg(total_score) as 마케팅_전략_평균
from enrollment e
join 
/*정답
select 
    count(*) as 마케팅_전략_수강_신청건수,
    avg(total_score) as 마케팅_전략_평균
from enrollment e
join course c on e.enr_csid = c.cs_id
where cs_name = '마케팅 전략';
*/

--#실습 2-26check#
select 
    enr_stdno, cs_name
from enrollment e
join course c on e.enr_csid = c.cs_id;
where
/*
select 
    enr_stdno, cs_name
from enrollment e
join course c on e.enr_csid = c.cs_id;
where grade = 'A';
*/

--#실습 2-27check#
select
    stdno,
    name,
    major,
    enr_csid,
    cs_name,
    cs_credit,
    total_score,
    grade
from student s
join course c on s.major = c.cs_dept
join enrollment e on s.stdno = e.enr_stdno;
/*정답
select
    stdno,
    name,
    major,
    enr_csid,
    cs_name,
    cs_credit,
    total_score,
    grade
from student s
join enrollment e on s.stdno = e.enr_stdno
join course c on e.enr_csid = c.cs_id;

*/

--실습 2-28check
select 
    stdno,
    name,
    cs_name,
    total_score,
    grade
from student s
join course c on s.major = c.cs_dept
join enrollment e on s.stdno = e.enr_stdno
where grade = 'F';
/*정답
select
    stdno,
    name,
    cs_name,
    total_score,
    grade
from student s
join enrollment e on s.stdno = e.enr_stdno
join course c on e.enr_csid = c.cs_id;
where grade = 'F';
*/

--#실습 2-29check#

    stdno,
    name,
    sum(cs_credit) as 이수학점
from student s
join course c on s.major = c.cs_dept
join enrollment e on s.stdno = e.enr_stdno
where grade != 'f'
group by stdno, name;
/*정답
select
    stdno,
    name,
    sum(cs_credit) as 이수학점,
    cs_name,
    total_score,
    grade
from student s
join enrollment e on s.stdno = e.enr_stdno
join course c on e.enr_csid = c.cs_id;
where grade != 'F'
group by stdno, name;
*/

--실습 2-30check
select
    s.stdno,
    s.name,
    s.major
from student s
where s.stdno not in (
    SELECT ENR_STDNO
    FROM ENROLLMENT ); 